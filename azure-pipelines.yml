# Build and Push Dockerfile
# Runs sonarqube and publishes test results
# Deploys to azure function slots


trigger:
- master

resources:
- repo: self

variables:
  vmImageName: 'ubuntu-latest'
  pythonVersion: '3.6'
  imageName: 'pythonfunc'
  repo: 'pythonfunc'
  azureCR: zanicr.azurecr.io
  rg: pythonv3
  funcname: hellworldfunc
  vm: ubuntu-latest

stages:
- stage: Build
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vm)
    steps:
    
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.6'
        addToPath: true
        architecture: 'x64'

    - task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063157.SonarQubePrepare@4
      displayName: 'Prepare analysis on SonarQube'
      inputs:
        SonarQube: sonarconnection
        scannerMode: CLI
        configMode: manual
        cliProjectKey: pythonproject
        cliProjectName: pythonproject

    - script: 'python -m pip install --upgrade pip && pip install -r requirements.txt'
      displayName: 'Install dependencies'

    - task: Docker@2
      displayName: buildAndPush
      inputs:
        containerRegistry: acr
        repository: $(repo)
        tags: '$(imageName).$(Build.BuildId)'
    
    - task: SonarSource.sonarqube.6D01813A-9589-4B15-8491-8164AEB38055.SonarQubeAnalyze@4
      displayName: 'Run Code Analysis'

    - task: SonarSource.sonarqube.291ed61f-1ee4-45d3-b1b0-bf822d9095ef.SonarQubePublish@4
      displayName: 'Publish Quality Gate Result'

- stage: DeployDev
  displayName: Deploy to dev slot
  dependsOn: Build
  jobs:
  - deployment: DeployAzureFunction
    displayName: deploy Azure function
    pool:
      vmImage: $(vm)
    environment: 'azurefunc-env-dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionAppContainer@1
            displayName: 'Azure Function App on Container Deploy: hellworldfunc'
            inputs:
              azureSubscription: 'Visual Studio Enterprise with MSDN (92800e22-a5bd-44b1-a59a-2defd15e82d1)'
              appName: $(funcname)
              deployToSlotOrASE: true
              resourceGroupName: $(rg)
              slotName: dev
              imageName: '$(azureCR)/$(repo):latest'

- stage: DeployUAT
  displayName: Deploy to UAT slot
  dependsOn: DeployDev
  jobs:
  - deployment: DeployAzureFunction
    displayName: deploy Azure function
    pool:
      vmImage: $(vm)'
    environment: 'azurefunc-env-UAT'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionAppContainer@1
            displayName: 'Azure Function App on Container Deploy: hellworldfunc'
            inputs:
              azureSubscription: 'Visual Studio Enterprise with MSDN (92800e22-a5bd-44b1-a59a-2defd15e82d1)'
              appName: $(funcname)
              deployToSlotOrASE: true
              resourceGroupName: $(rg)
              slotName: UAT
              imageName: '$(azureCR)/$(repo):latest'

- stage: DeployNearlyProd
  displayName: Deploy to nearlyprod slot
  dependsOn: DeployUAT
  jobs:
  - deployment: DeployAzureFunction
    displayName: deploy Azure function
    pool:
      vmImage: $(vm)'
    environment: 'azurefunc-env-nearlyprod'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionAppContainer@1
            displayName: 'Azure Function App on Container Deploy: hellworldfunc'
            inputs:
              azureSubscription: 'Visual Studio Enterprise with MSDN (92800e22-a5bd-44b1-a59a-2defd15e82d1)'
              appName: $(funcname)
              deployToSlotOrASE: true
              resourceGroupName: $(rg)
              slotName: nearlyprod
              imageName: '$(azureCR)/$(repo):latest'